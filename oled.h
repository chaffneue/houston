/*
i2c based OLED Display driver for Houston
This is an adaptation of SeeedGrayOLED and TWI with specific changes
to suit Houston's scheduler - this library should work with many SSD1327 based 
OLED displays

@author Richard Hoar <richard.hoar@streeme.com>
@see https://github.com/chaffneue/houston
@see houston.ino for changelog

Derivation Notice - SeedGrayOLED License included
---
 * SSD1327 Gray OLED Driver Library
 *
 * Copyright (c) 2011 seeed technology inc.
 * Author        :   Visweswara R
 * Create Time   :   Dec 2011 - May 2017
 * Change Log    :
 * 
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
---
  twi.c - TWI/I2C library for Wiring & Arduino
  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Modified 2012 by Todd Krein (todd@krein.org) to implement repeated starts
*/
#ifndef OLED_h
  #define OLED_h

  #define getTempoCharOffset(integralTempo) ((integralTempo % 10) * 6)

  // Driver Setup Configuration and Commands 
  #define DISPLAY_ADDRESS 0x3c
  #define COMMAND_MODE 0x80
  #define DATA_MODE 0x40
  #define SET_ROW 0x75
  #define SET_COLUMN 0x15
  #define DRIVER_COLUMN_OFFSET 8 // Offset left by 8 for the 96x96 display
  #define DRIVER_ROW_OFFSET 0    // Starts at 0 for the 96x96 display

  // This class uses a dirty rectangle strategy to write to the fairly slow 
  // screen hardware in the OLED. Passing these values to setDirty  will tell
  // the driver to get fresh values.
  #define DIRTY_INT_EXT 1
  #define DIRTY_TAP 2
  #define DIRTY_TEMPO 3
  #define DIRTY_BAR_COUNTER 4
  #define DIRTY_LATENCY 5
  #define DIRTY_LIST_LENGTH 99

  const unsigned char tempoFont[1088] = {
    0x00, 0x09, 0xEF, 0xFE, 0xA0, 0x00, 0x00, 0x02, 0xAF, 0xFF, 0xD0, 0x00, 
    0x06, 0xBD, 0xFF, 0xFC, 0x70, 0x00, 0x06, 0xAD, 0xDF, 0xFD, 0xA2, 0x00, 
    0x00, 0x00, 0x07, 0xFF, 0xFF, 0x70, 0x00, 0xDF, 0xFF, 0xFF, 0xFF, 0xF0, 
    0x00, 0x00, 0x09, 0xCD, 0xFF, 0x70, 0xAF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0x00, 0x2B, 0xEF, 0xFF, 0xC7, 0x00, 0x00, 0x2A, 0xEF, 0xFE, 0xA2, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0xFF, 0xFF, 
    0xFE, 0x20, 0x04, 0xCF, 0xFF, 0xFF, 0xD0, 0x00, 0xCF, 0xFF, 0xFF, 0xFF, 
    0xFC, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFE, 0x20, 0x00, 0x00, 0x0F, 0xFF, 
    0xFF, 0x70, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x07, 0xFF, 0xFF, 
    0xFF, 0x70, 0xAF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x06, 0xFF, 0xFF, 0xFF, 
    0xFF, 0x90, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x0B, 0xFF, 0xFE, 0xEF, 0xFF, 0xD0, 0x0C, 0xFF, 
    0xFF, 0xFF, 0xD0, 0x00, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0x90, 0x0F, 0xFF, 
    0xDE, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0xAF, 0xFF, 0xFF, 0x70, 0x00, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x9F, 0xFF, 0xFF, 0xDD, 0x60, 0xAF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0x2F, 0xFF, 0xFA, 0xAF, 0xFF, 0xF4, 0x2F, 0xFF, 
    0xFD, 0xEF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x4F, 0xFF, 0xC0, 0x0C, 0xFF, 0xF6, 0x0A, 0xFF, 0xBF, 0xFF, 0xD0, 0x00, 
    0x7F, 0xA4, 0x02, 0xCF, 0xFF, 0xD0, 0x0A, 0x80, 0x00, 0x6F, 0xFF, 0xF0, 
    0x00, 0x04, 0xFF, 0xCF, 0xFF, 0x70, 0x06, 0xFF, 0xF0, 0x00, 0x00, 0x00, 
    0x07, 0xFF, 0xFF, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xF9, 
    0x9F, 0xFF, 0x60, 0x06, 0xFF, 0xFA, 0xAF, 0xFF, 0x90, 0x0A, 0xFF, 0xF9, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0xFF, 0x40, 0x04, 
    0xFF, 0xFB, 0x06, 0xA2, 0x0F, 0xFF, 0xD0, 0x00, 0x02, 0x00, 0x00, 0x0F, 
    0xFF, 0xF0, 0x00, 0x00, 0x00, 0x0D, 0xFF, 0xF0, 0x00, 0x0C, 0xFF, 0x6F, 
    0xFF, 0x70, 0x07, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF2, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0xFF, 0xF0, 0xAF, 0xFF, 0x20, 0x00, 
    0xFF, 0xFA, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xDF, 0xFF, 0x00, 0x00, 0xFF, 0xFD, 0x00, 0x00, 
    0x0F, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x0D, 0xFF, 0xF0, 0x00, 0x00, 
    0x00, 0x7F, 0xFF, 0xC0, 0x00, 0x7F, 0xFD, 0x0F, 0xFF, 0x70, 0x0A, 0xFF, 
    0xC0, 0x00, 0x00, 0x00, 0x8F, 0xFF, 0x76, 0xAA, 0x80, 0x00, 0x00, 0x00, 
    0x00, 0x8F, 0xFF, 0x90, 0x7F, 0xFF, 0xC2, 0x0A, 0xFF, 0xF4, 0xFF, 0xFD, 
    0x00, 0x00, 0xDF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xFF, 0xFD, 0x00, 0x00, 0xDF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xD0, 0x00, 
    0x00, 0x00, 0x00, 0x2F, 0xFF, 0xD0, 0x00, 0x6D, 0xDF, 0xFF, 0xFE, 0x20, 
    0x00, 0xFF, 0xF6, 0x0F, 0xFF, 0x70, 0x0A, 0xFF, 0xFF, 0xFD, 0xA2, 0x00, 
    0xCF, 0xFF, 0xDF, 0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 
    0x0D, 0xFF, 0xFF, 0xEF, 0xFF, 0x90, 0xFF, 0xFF, 0x00, 0x00, 0xEF, 0xFF, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFD, 0x00, 0x00, 
    0xDF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0xBF, 
    0xFF, 0x90, 0x00, 0x7F, 0xFF, 0xFF, 0xF4, 0x00, 0x0A, 0xFF, 0xC0, 0x0F, 
    0xFF, 0x70, 0x0C, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0xEF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xF4, 0x00, 0x00, 0x09, 0xFF, 0xFA, 0x00, 0x02, 0xCF, 0xFF, 0xFF, 
    0xFC, 0x00, 0xCF, 0xFF, 0xC2, 0x0A, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFD, 0x00, 0x00, 0xDF, 0xFF, 0x00, 0x00, 
    0x0F, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x09, 0xFF, 0xFD, 0x00, 0x00, 0x7F, 
    0xFF, 0xFF, 0xFF, 0x90, 0x2F, 0xFF, 0x20, 0x0F, 0xFF, 0x70, 0x0B, 0xDD, 
    0xDF, 0xFF, 0xFF, 0xF4, 0xFF, 0xFF, 0xC2, 0x2C, 0xFF, 0xFC, 0x00, 0x00, 
    0x0F, 0xFF, 0xF2, 0x00, 0x09, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x4F, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xFF, 0xFD, 0x00, 0x00, 0xDF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xD0, 0x00, 
    0x00, 0x00, 0x9F, 0xFF, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x8E, 0xFF, 0xF7, 
    0xCF, 0xFF, 0xDD, 0xDF, 0xFF, 0xED, 0x00, 0x00, 0x00, 0x4E, 0xFF, 0xFA, 
    0xFF, 0xFE, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x9F, 0xFF, 0xA0, 0x00, 
    0x8F, 0xFF, 0xC4, 0x9F, 0xFF, 0xFA, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0xFF, 0x00, 0x00, 
    0xFF, 0xFD, 0x00, 0x00, 0x0F, 0xFF, 0xD0, 0x00, 0x00, 0x09, 0xFF, 0xFF, 
    0x60, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFC, 0xDF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFD, 0xFF, 0xFD, 0x00, 0x00, 
    0xDF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x00, 0xEF, 0xFF, 0x20, 0x02, 
    0xFF, 0xFF, 0x00, 0x07, 0xAA, 0x76, 0xFF, 0xFA, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xBF, 0xFF, 0x40, 0x04, 0xFF, 0xFB, 0x00, 0x00, 
    0x0F, 0xFF, 0xD0, 0x00, 0x00, 0xCF, 0xFF, 0xF6, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x02, 0xFF, 0xFD, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
    0x00, 0x02, 0xFF, 0xFC, 0xCF, 0xFF, 0x20, 0x00, 0xEF, 0xFF, 0x00, 0x09, 
    0xFF, 0xFA, 0x00, 0x00, 0xFF, 0xFD, 0x00, 0x00, 0xDF, 0xFF, 0x00, 0x00, 
    0x00, 0x2E, 0xFF, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x4F, 0xFF, 0xC0, 0x0C, 0xFF, 0xF6, 0x00, 0x00, 0x0F, 0xFF, 0xD0, 0x00, 
    0x2C, 0xFF, 0xFD, 0x20, 0x00, 0x00, 0x0B, 0x60, 0x00, 0x2C, 0xFF, 0xFB, 
    0x00, 0x00, 0x00, 0x0F, 0xFF, 0x70, 0x07, 0x00, 0x00, 0x2C, 0xFF, 0xF9, 
    0x8F, 0xFF, 0xA0, 0x07, 0xFF, 0xFB, 0x00, 0x2F, 0xFF, 0xF2, 0x00, 0x00, 
    0xFF, 0xFF, 0x20, 0x02, 0xFF, 0xFE, 0x00, 0x00, 0x07, 0xEF, 0xFF, 0xA0, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFA, 0x0C, 0xFF, 0xFE, 0xEF, 
    0xFF, 0xC0, 0x00, 0x00, 0x0F, 0xFF, 0xD0, 0x00, 0xEF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xF7, 0x6F, 0xFF, 0xDD, 0xFF, 0xFF, 0xF4, 0x00, 0x00, 0x00, 0x0F, 
    0xFF, 0x70, 0x6F, 0xFD, 0xDD, 0xFF, 0xFF, 0xE0, 0x0D, 0xFF, 0xFE, 0xDF, 
    0xFF, 0xF4, 0x00, 0xAF, 0xFF, 0xA0, 0x00, 0x00, 0xAF, 0xFF, 0xFA, 0xAF, 
    0xFF, 0xF9, 0x09, 0xDD, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xFF, 0xFF, 0x02, 0xEF, 0xFF, 0xFF, 0xFE, 0x20, 0x00, 0x00, 
    0x0F, 0xFF, 0xD0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xAF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x70, 0xAF, 0xFF, 
    0xFF, 0xFF, 0xFD, 0x20, 0x02, 0xEF, 0xFF, 0xFF, 0xFF, 0x60, 0x02, 0xFF, 
    0xFF, 0x20, 0x00, 0x00, 0x0C, 0xFF, 0xFF, 0xFF, 0xFF, 0xB0, 0x0A, 0xFF, 
    0xFF, 0xFF, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
    0x00, 0x0A, 0xEF, 0xFE, 0xA0, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xD0, 0x00, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x08, 0xCD, 0xFF, 0xDC, 0x92, 0x00, 
    0x00, 0x00, 0x00, 0x0F, 0xFF, 0x70, 0x6B, 0xDF, 0xFF, 0xFC, 0x80, 0x00, 
    0x00, 0x09, 0xDF, 0xFF, 0xB2, 0x00, 0x0A, 0xFF, 0xFA, 0x00, 0x00, 0x00, 
    0x00, 0x7C, 0xFF, 0xFF, 0xC7, 0x00, 0x0A, 0xFF, 0xFC, 0xA2, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFA
  };

  const unsigned char systemFont[456] = {
    0x00, 0x4F, 0xF6, 0x00, 0x00, 0x4D, 0xF0, 0x00, 0x02, 0xDF, 0xFA, 0x00, 
    0x02, 0xEF, 0xF8, 0x00, 0x00, 0x00, 0xCF, 0x00, 0x00, 0xCF, 0xFF, 0x40, 
    0x00, 0x08, 0xFB, 0x00, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 0x9F, 0xFA, 0x00, 
    0x00, 0x6F, 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xDA, 0xAE, 
    0x00, 0x00, 0x9C, 0xF0, 0x00, 0x00, 0xA2, 0x9F, 0x40, 0x00, 0xA2, 0xBF, 
    0x00, 0x00, 0x08, 0xFF, 0x00, 0x00, 0xD9, 0x00, 0x00, 0x00, 0x7F, 0x70, 
    0x00, 0x00, 0x00, 0x0F, 0xA0, 0x02, 0xF6, 0x6F, 0x20, 0x00, 0xF9, 0xAF, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 
    0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF4, 0x4F, 0x00, 0x00, 0x07, 
    0xF0, 0x00, 0x00, 0x00, 0x0F, 0x70, 0x00, 0x00, 0x9F, 0x00, 0x00, 0x4F, 
    0xAF, 0x00, 0x00, 0xF7, 0x00, 0x00, 0x00, 0xEA, 0x00, 0x00, 0x00, 0x00, 
    0x7F, 0x20, 0x02, 0xF4, 0x4F, 0x20, 0x07, 0xF2, 0x2F, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 
    0xFF, 0xFF, 0x00, 0x07, 0xF0, 0x0F, 0x70, 0x00, 0x07, 0xF0, 0x00, 0x00, 
    0x00, 0x8F, 0x20, 0x00, 0x02, 0xDD, 0x00, 0x00, 0xEB, 0x6F, 0x00, 0x00, 
    0xFF, 0xF8, 0x00, 0x02, 0xFF, 0xFA, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 
    0xBF, 0xF9, 0x00, 0x07, 0xF0, 0x0F, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0xF0, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
    0x07, 0xF0, 0x0F, 0x70, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x02, 0xFB, 0x00, 
    0x00, 0x9F, 0xF8, 0x00, 0x0A, 0xD0, 0x6F, 0x00, 0x00, 0x02, 0xAF, 0x40, 
    0x07, 0xF7, 0x7F, 0x40, 0x00, 0x04, 0xF4, 0x00, 0x00, 0xEC, 0xDE, 0x00, 
    0x02, 0xF8, 0x8F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF0, 
    0xF0, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF6, 0x6F, 
    0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x0D, 0xD0, 0x00, 0x00, 0x00, 0x8F, 
    0x40, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x0F, 0x70, 0x07, 0xF0, 0x0F, 
    0x70, 0x00, 0x0C, 0xD0, 0x00, 0x07, 0xF0, 0x2F, 0x70, 0x00, 0x9F, 0xFF, 
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x00, 
    0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xDA, 0xAE, 0x00, 0x00, 0x07, 
    0xF0, 0x00, 0x00, 0xCE, 0x20, 0x00, 0x02, 0x60, 0x7F, 0x60, 0x00, 0x00, 
    0x6F, 0x00, 0x02, 0x60, 0xAF, 0x20, 0x00, 0xF9, 0x7F, 0x20, 0x00, 0x2F, 
    0x80, 0x00, 0x04, 0xF7, 0x7F, 0x40, 0x00, 0x06, 0xDC, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 
    0xFF, 0xFF, 0x6B, 0x00, 0x6F, 0xF6, 0x00, 0x00, 0x06, 0xF0, 0x00, 0x09, 
    0xFF, 0xFF, 0x90, 0x07, 0xFF, 0xF9, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x08, 
    0xFF, 0xF7, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 
    0xAF, 0xF9, 0x00, 0x00, 0xDF, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F
  };

  const unsigned char timeAdjustLabel[380] = {
    0xFF, 0xFF, 0xF7, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x0E, 0xF0, 0x00, 0x00, 0x06, 0xF0, 0x8F, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0xA0, 0x00, 0x00, 0x06, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x02, 0x60, 0x00, 0xF7, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x2F, 0xF6, 0x00, 0x00, 0x07, 0xF0, 0x28, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x4F, 0x20, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x02, 0xF4, 0x00, 0xF7, 0x00, 0xF6, 0x6F, 0xEF, 0xBE, 0xFA, 
    0x00, 0x4F, 0xF7, 0x00, 0x00, 0x9F, 0xEB, 0x00, 0x6F, 0xFE, 0xF0, 0x6F, 
    0x0F, 0x60, 0x6F, 0x0C, 0xFE, 0x0F, 0xFF, 0x90, 0x00, 0xBB, 0x6F, 0xEF, 
    0xAF, 0xFA, 0x09, 0xFF, 0xC0, 0xBC, 0x00, 0xF7, 0x00, 0xF7, 0x7F, 0x87, 
    0xFA, 0x7F, 0x20, 0xDA, 0x9F, 0x00, 0x00, 0xDC, 0xBE, 0x00, 0xFB, 0x0B, 
    0xF0, 0x7F, 0x0F, 0x70, 0x7F, 0x4F, 0x24, 0x07, 0xF0, 0x00, 0x00, 0xF7, 
    0x7F, 0x89, 0xF8, 0x7F, 0x2F, 0x80, 0x40, 0x7F, 0x00, 0xF7, 0x00, 0xF7, 
    0x7F, 0x00, 0xF7, 0x0F, 0x70, 0xF4, 0x2F, 0x20, 0x00, 0xF8, 0x7F, 0x44, 
    0xF2, 0x07, 0xF0, 0x7F, 0x0F, 0x70, 0x7F, 0x0F, 0xD6, 0x07, 0xF0, 0x00, 
    0x00, 0xF2, 0x7F, 0x07, 0xF0, 0x0F, 0x7E, 0xFC, 0x20, 0x2F, 0x00, 0xF7, 
    0x00, 0xF7, 0x7F, 0x00, 0xF7, 0x0F, 0x77, 0xFF, 0xFF, 0x60, 0x08, 0xFF, 
    0xFF, 0xA6, 0xF2, 0x07, 0xF0, 0x7F, 0x0F, 0x70, 0x7F, 0x02, 0xCF, 0x27, 
    0xF0, 0x00, 0x00, 0xF0, 0x7F, 0x07, 0xF0, 0x0F, 0x70, 0x9E, 0xF0, 0x0F, 
    0x00, 0xF7, 0x00, 0xF7, 0x7F, 0x00, 0xF7, 0x0F, 0x72, 0xF8, 0x04, 0x00, 
    0x0C, 0xD0, 0x0C, 0xD0, 0xFB, 0x0B, 0xF0, 0x7F, 0x0F, 0xA0, 0xBF, 0x06, 
    0x4F, 0x46, 0xF2, 0x00, 0x00, 0xF4, 0x7F, 0x07, 0xF0, 0x0F, 0x77, 0x08, 
    0xF0, 0x4F, 0x00, 0xF6, 0x00, 0xF6, 0x6F, 0x00, 0xF6, 0x0F, 0x60, 0x7F, 
    0xFD, 0x00, 0x0F, 0x90, 0x07, 0xF0, 0x7F, 0xFC, 0xF0, 0x7F, 0x08, 0xFF, 
    0xCF, 0x4F, 0xFC, 0x00, 0xEF, 0x70, 0x00, 0xE8, 0x6F, 0x06, 0xF0, 0x0F, 
    0x6F, 0xFF, 0x90, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x0A, 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xF2
  };

  const unsigned char barLabel[49] = {
    0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0xF7, 0x09, 0xF0, 0x00, 0x00, 
    0x00, 0x00, 0xF7, 0x2A, 0xF0, 0xCF, 0xB0, 0x6F, 0xFB, 0xFF, 0xFF, 0x80, 
    0x44, 0xF2, 0x7F, 0xA2, 0xF7, 0x09, 0xF0, 0xAF, 0xF7, 0x7F, 0x00, 0xF7, 
    0x09, 0xF4, 0xF4, 0xF7, 0x7F, 0x00, 0xFF, 0xFE, 0x70, 0xDF, 0xF6, 0x6F,
    0x00
  };
  
  const unsigned char extLabel[49] = {
    0xFF, 0xFF, 0x00, 0x00, 0x00, 0x07, 0x00, 0xF7, 0x00, 0x00, 0x00, 0x00, 
    0x7F, 0x00, 0xF7, 0x00, 0x0D, 0xC2, 0xF9, 0xFF, 0xF7, 0xFF, 0xFD, 0x02, 
    0xFD, 0xC0, 0x7F, 0x00, 0xF7, 0x00, 0x00, 0xBF, 0x40, 0x7F, 0x00, 0xF7, 
    0x00, 0x04, 0xFC, 0xD0, 0x7F, 0x20, 0xFF, 0xFF, 0x0E, 0xB0, 0xFA, 0x0E,
    0xF6
  };
  
  const unsigned char intLabel[49] = {
    0xF6, 0x00, 0x00, 0x00, 0x07, 0x20, 0x00, 0xF7, 0x00, 0x00, 0x00, 0x0F, 
    0x70, 0x00, 0xF7, 0x0F, 0xDF, 0xB0, 0xDF, 0xF8, 0x00, 0xF7, 0x0F, 0x86, 
    0xF4, 0x0F, 0x70, 0x00, 0xF7, 0x0F, 0x70, 0xF7, 0x0F, 0x70, 0x00, 0xF7, 
    0x0F, 0x70, 0xF7, 0x0F, 0x60, 0x00, 0xF6, 0x0F, 0x60, 0xF6, 0x0C, 0xF8,
    0x00
  };

  const int tempoFontWidth = 68;
  const int tempoFontHeight = 16;
  const int systemFontWidth = 57;
  const int systemFontHeight = 8;
  const int systemViewportHeight = 8;
  const int bufferSize = 16;

  //Dynamic Viewports
  // Int/Ext - 14 x 7 pixels
  const int intExtViewportWidth = 7; //widths are divided in half on this driver
  const int intExtViewportHeight = 7;
  const int intExtViewportLength = 49;

  // Tap Counter - 28 x 8 pixels
  const int tapCounterViewportWidth = 20;
  const int tapCounterViewportHeight = 8;
  const int tapCounterViewportLength = 160;  
  
  // Tempo - 56 x 16 pixels
  const int tempoViewportWidth = 28; 
  const int tempoViewportHeight = 16;
  const int tempoViewportLength = 448;

  // Bar Counter - 26 x 8 pixels
  const int barCounterViewportWidth = 13;
  const int barCounterViewportHeight = 8;
  const int barCounterViewportLength = 104;
 
  // Latency - 76 x 8 pixels
  const int latencyViewportWidth = 38;
  const int latencyViewportHeight = 8;
  const int latencyViewportLength = 304;

  class OLED {
    public:
      void begin();
      void setIntExt(int state);
      void setTapState(int state);
      void setTempo(double tempo);
      void setBarCounter(int playhead, int currentBeat);
      void setLatency(int channelLatency[]);
      int getDirtyId();
      void drawRect(int top, int left, int width, int height);
      void setRasterLength(int length);
      void setRasterViewport(int dirtyId);
      bool raster();

    private:
      void sendCommand(unsigned char command);
      char sc;
      int dirtyViewportList[DIRTY_LIST_LENGTH];
      void pushToDirtyList(int dirtyId);
      void pushToTempoBitmap(int tempoFontOffset, int tempoViewportOffset, int character_width);
      void pushToSystemBitmap(unsigned char *viewport, int systemViewportWidth, int systemViewportOffset, int systemFontOffset, int characterWidth);
  };
#endif
